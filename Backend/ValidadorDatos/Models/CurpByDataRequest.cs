// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using AltergoAPI.Nss.Core.Models;
//
//    var curpByDataRequest = CurpByDataRequest.FromJson(jsonString);

namespace AltergoAPI.Nss.Core.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class CurpByDataRequest
    {
        [JsonProperty("nombre", NullValueHandling = NullValueHandling.Ignore)]
        public string Nombre { get; set; }

        [JsonProperty("apellidoPaterno", NullValueHandling = NullValueHandling.Ignore)]
        public string ApellidoPaterno { get; set; }

        [JsonProperty("apellidoMaterno", NullValueHandling = NullValueHandling.Ignore)]
        public string ApellidoMaterno { get; set; }

        [JsonProperty("sexo", NullValueHandling = NullValueHandling.Ignore)]
        public string Sexo { get; set; }

        /// <summary>
        /// Ejecutar el método: ObtenerEstadosAcronimo
        /// </summary>
        [JsonProperty("cventidadNacimiento", NullValueHandling = NullValueHandling.Ignore)]
        public string CventidadNacimiento { get; set; }

        [JsonProperty("fechaNacimiento", NullValueHandling = NullValueHandling.Ignore)]
        public string FechaNacimiento { get; set; }
    }

    public partial class CurpByDataRequest
    {
        public static CurpByDataRequest FromJson(string json) => JsonConvert.DeserializeObject<CurpByDataRequest>(json, AltergoAPI.Nss.Core.Models.ConverterCurpByDataRequest.Settings);
    }

    public static class SerializeCurpByDataRequest
    {
        public static string ToJson(this CurpByDataRequest self) => JsonConvert.SerializeObject(self, AltergoAPI.Nss.Core.Models.ConverterCurpByDataRequest.Settings);
    }

    internal static class ConverterCurpByDataRequest
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
